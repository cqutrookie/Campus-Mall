<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:tx="http://www.springframework.org/schema/tx" xmlns:util="http://www.springframework.org/schema/util"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
         http://www.springframework.org/schema/context
         https://www.springframework.org/schema/context/spring-context.xsd
          http://www.springframework.org/schema/tx
          http://www.springframework.org/schema/tx/spring-tx.xsd http://www.springframework.org/schema/util https://www.springframework.org/schema/util/spring-util.xsd">
    <!-- 扫描组件 -->
    <context:component-scan base-package="com.lxyup">
        <context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
    </context:component-scan>
    <!--  引入jdbc.properties  -->
    <context:property-placeholder location="classpath:jdbc.properties"/>

    <!--  配置Druid数据源  -->
    <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource">
        <property name="driverClassName" value="${jdbc.driver}"/>
        <property name="url" value="${jdbc.url}"/>
        <property name="username" value="${jdbc.username}"/>
        <property name="password" value="${jdbc.password}"/>
    </bean>

    <!-- 配置事务管理器 -->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"/>
    </bean>
    <!--
            开启事务的注解驱动
            将使用注解@Transactional标识的有方法或类中的所方法进行事务管理
         -->
    <tx:annotation-driven transaction-manager="transactionManager"/>

    <!--  配置用于创建SqlSessionFactory的工厂bean,可以直接在spring的IOC中获取SqlSessionFactory  -->
    <bean class="org.mybatis.spring.SqlSessionFactoryBean">
        <!--  设置MyBatis配置文件的路径（可以不设置）  -->
        <property name="configLocation" value="classpath:mybatis-config.xml"/>
        <!--  设置数据源  -->
        <property name="dataSource" ref="dataSource"/>
        <!--  设置类型别名所对应的包  -->
        <property name="typeAliasesPackage" value="com.lxyup.Login.pojo,com.lxyup.SaveMoney.pojo"/>
        <!-- 设置映射文件的路径 ,若映射文件所在路径和mapper接口所在路径一致，则不需要设置 -->
        <!-- <property name="mapperLocations" value="classpath:mapper/*.xml"></property> -->
    </bean>
    <!--
            配置mapper接口的扫描配置
            由mybatis-spring提供，可以将指定包下所有的mapper接口创建动态代理
            并将这些动态代理作为IOC容器的bean管理
         -->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="com.lxyup.Login.mapper,com.lxyup.SaveMoney.mapper"/>
    </bean>
</beans>